name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [github-actions]
  pull_request:
    branches: [github-actions]
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  # CI Job - Test & Build
  ci:
    name: 🧪 CI - Test & Build
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: company_db
          MYSQL_USER: company
          MYSQL_PASSWORD: Ukshati@123
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install Dependencies
        working-directory: ./frontend
        run: npm ci

      - name: 🔍 Linting and Code Quality Check
        working-directory: ./frontend
        run: |
          echo "Running ESLint..."
          npm run lint:ci
          echo "✅ Linting and code quality check completed"

      - name: 🧪 Run Unit Tests
        working-directory: ./frontend
        run: npm run test:unit

      - name: 🧪 Run Integration Tests
        working-directory: ./frontend
        run: npm run test:integration

      - name: 🏗️ Build Application
        working-directory: ./frontend
        run: npm run build

      - name: 🔐 Security Scans
        working-directory: ./frontend
        run: |
          echo "Running security audit..."
          npm audit --audit-level=critical || echo "Non-critical vulnerabilities found, continuing..."

  # CD Job - Deploy (only runs after CI succeeds and on push events)
  cd:
    name: 🚀 CD - Deploy
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'push' && github.ref == 'refs/heads/github-actions'
    
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🏗️ Build and Push Docker Images
        run: |
          # Build and tag images using your existing Dockerfiles
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/ukshati-frontend:${{ github.sha }} .
          docker build -f Dockerfile.mysql -t ${{ secrets.DOCKERHUB_USERNAME }}/ukshati-database:${{ github.sha }} .
          # Push images to Docker Hub
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/ukshati-frontend:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/ukshati-database:${{ github.sha }}

      - name: 🚀 Simulate Deployment
        run: |
          echo "🧪 Simulating deployment..."
          echo "✅ Docker images would be deployed to a server here"
          echo "✅ Deployment simulation completed"

      - name: 📢 Notify Success
        if: success()
        run: echo "🎉 Successfully completed CI/CD pipeline!"

      - name: 📢 Notify Failure
        if: failure()
        run: echo "❌ CI/CD pipeline failed!"
